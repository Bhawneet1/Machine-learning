# -*- coding: utf-8 -*-
"""numpyBasics.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QtrNtvG8xwwLG_13vPsFnDcH3HTZ9z4c
"""

import numpy as np
#In numpy we can store multi dimensional array and also uniform array but in list we can only store 1-d array

print("1-D")
a=np.array([1,2,3,4,5,6])
a

print("2-D")
b=np.array([[1,2,3],[4,5,6]])
b

print("3-D")
c=np.array([[[1,2,3],[4,5,6],[7,8,9]]])
c

type(a)

type(b)

print(a.size)
print(b.size)
print(c.size)
#number of elements are returned

print(a.shape)
print(b.shape)
print(c.shape)
#return rows,col

print(a.dtype)
print(b.dtype)
print(c.dtype)
#return datatypes int64

d = np.array([10.1,20.2,30.3])
print(d.dtype)
#datatype becomes float64

b.transpose()

np.empty((4,4),dtype=int)
#(4,4)->(row,col) prints array of the given size of int type with garbage values

np.empty((4,4),dtype=float)

x=np.ones(6)
x
#six columns are assigned value 1 of row=1
#default datatype is float

y=np.ones((4,4))
y
#row,col tuple used
#default datatype is float

z=np.ones((4,4),dtype=int)
z

e=np.zeros(5)
e
# all same as np.ones just print 0 instead of one

f=np.zeros((5,6))
f

g=np.zeros((5,6),dtype=int)
g

h=np.ones((2,3),dtype=bool)
h

h=np.zeros((2,3),dtype=bool)
h

i=np.empty((2,3),dtype=bool)
i

j=np.ones((3,4),dtype=str)
j
#one in single quots
#array([['1', '1', '1', '1'],
#       ['1', '1', '1', '1'],
#      ['1', '1', '1', '1']], dtype='<U1')

k=np.zeros((3,4),dtype=str)
k
#we get empty quotes
#array([['', '', '', ''],
#       ['', '', '', ''],
 #      ['', '', '', '']], dtype='<U1')

l=np.arange(1,10)
l
#like for loop (1,10)->(start,end) print all integers from 1 to 10 skips 10

m=np.arange(1,10,2)
m
#print numbers between 1 to 10 but with a gap of 2,  means odd numbers

n=np.arange(2,20,2)
n
#print all even numbers except 10

m=np.reshape(n,(3,3))
m
#reshape 1-D to 2-D array
# first 3 first row

n=np.arange(1,100,2)
n

o=np.reshape(n,(10,5))
o

p=n.flatten()
p
#convert is to 1-D array

q=n.ravel()
q
#convert is to 1-D array same as flatten

#ravel changes original array
#return reference
#it is a library level function
#ravel faster than flatten as donot require any memory as changes original array


#flatten makes copy of original array
#modifies copied array
#ndarray object
#slower as copies the array from one to another

a=np.arange(1,51)
a=a.reshape(10,5)
a

a[0]
#first row
#array([1, 2, 3, 4, 5])

a[0][0]
#first element

a[2:5]
#3rd row to 5th row 3,4,5(index 2-4 )

a[:,2]
#all rows but third column(index  of 2th row)

a[2:5,4]
#3rd to 5th row and 5th column

a[:,:]
#all row to all cols

a[:,:].dtype