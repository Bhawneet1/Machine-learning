# -*- coding: utf-8 -*-
"""fullNumpy.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QtrNtvG8xwwLG_13vPsFnDcH3HTZ9z4c
"""

import numpy as np
#In numpy we can store multi dimensional array and also uniform array but in list we can only store 1-d array

print("1-D")
a=np.array([1,2,3,4,5,6])
a

print("2-D")
b=np.array([[1,2,3],[4,5,6]])
b

print("3-D")
c=np.array([[[1,2,3],[4,5,6],[7,8,9]]])
c

type(a)

type(b)

print(a.size)
print(b.size)
print(c.size)
#number of elements are returned

print(a.shape)
print(b.shape)
print(c.shape)
#return rows,col

print(a.dtype)
print(b.dtype)
print(c.dtype)
#return datatypes int64

d = np.array([10.1,20.2,30.3])
print(d.dtype)
#datatype becomes float64

b.transpose()

np.empty((4,4),dtype=int)
#(4,4)->(row,col) prints array of the given size of int type with garbage values

np.empty((4,4),dtype=float)

x=np.ones(6)
x
#six columns are assigned value 1 of row=1
#default datatype is float

y=np.ones((4,4))
y
#row,col tuple used
#default datatype is float

z=np.ones((4,4),dtype=int)
z

e=np.zeros(5)
e
# all same as np.ones just print 0 instead of one

f=np.zeros((5,6))
f

g=np.zeros((5,6),dtype=int)
g

h=np.ones((2,3),dtype=bool)
h

h=np.zeros((2,3),dtype=bool)
h

i=np.empty((2,3),dtype=bool)
i

j=np.ones((3,4),dtype=str)
j
#one in single quots
#array([['1', '1', '1', '1'],
#       ['1', '1', '1', '1'],
#      ['1', '1', '1', '1']], dtype='<U1')

k=np.zeros((3,4),dtype=str)
k
#we get empty quotes
#array([['', '', '', ''],
#       ['', '', '', ''],
 #      ['', '', '', '']], dtype='<U1')

l=np.arange(1,10)
l
#like for loop (1,10)->(start,end) print all integers from 1 to 10 skips 10

m=np.arange(1,10,2)
m
#print numbers between 1 to 10 but with a gap of 2,  means odd numbers

n=np.arange(2,20,2)
n
#print all even numbers except 10

m=np.reshape(n,(3,3))
m
#reshape 1-D to 2-D array
# first 3 first row

n=np.arange(1,100,2)
n

o=np.reshape(n,(10,5))
o

p=n.flatten()
p
#convert is to 1-D array

q=n.ravel()
q
#convert is to 1-D array same as flatten

#ravel changes original array
#return reference
#it is a library level function
#ravel faster than flatten as donot require any memory as changes original array


#flatten makes copy of original array
#modifies copied array
#ndarray object
#slower as copies the array from one to another

a=np.arange(1,51)
a=a.reshape(10,5)
a

a[0]
#first row
#array([1, 2, 3, 4, 5])

a[0][0]
#first element

a[2:5]
#3rd row to 5th row 3,4,5(index 2-4 )

a[:,2]
#all rows but third column(index  of 2th row)

a[2:5,4]
#3rd to 5th row and 5th column

a[:,:]
#all row to all cols

a[:,:].dtype

a = np.arange(0,18).reshape((6,3))
b = np.arange(20,38).reshape((6,3))
print(a)
print(b)

a+b
#element-wise addition

np.add(a,b)
#same result as above

a-b

np.subtract(a,b)

a*b
#element-wise multiplication

np.multiply(a,b)

a/b

np.divide(a,b)

b=np.reshape(b,(3,6))
#to do matrix multiplication(row by col)
b

a@b
#matrix multiplication

a.dot(b)
#matrix multiplication

b.max()

b.min()

b.argmax()
#return address of max element or index

b.argmin()

np.sum(b)
#sum of all elements

np.sum(b,axis=0)
#sum of each column

np.sum(b,axis=1)
#sum of each row

np.sqrt(b)

np.mean(b)

np.var(b)

np.std(b)

np.log(b)

import matplotlib.pyplot as plt
plt.style.use('dark_background')

np.pi

np.sin(np.pi/2)
#in radians

np.sin(np.pi/6)
#in radians

np.cos(np.pi/2)
#give approx value almost equla to zero

np.tan(np.pi/2)
#very big approx equal to infinity

x=np.arange(1,11)
y=np.arange(10,110,10)
plt.figure(figsize=(6,6))
plt.plot(x,y,'r--')
plt.show()

x_sin=np.arange(0,2*np.pi,0.1)
y_sin=np.sin(x_sin) #sin values of x_sin in y_sin
print(y_sin)

plt.figure(figsize=(6,6))
plt.plot(x_sin,y_sin,'b--')
plt.show()

x_cos=np.arange(0,2*np.pi,0.1)
y_cos=np.cos(x_cos)
plt.figure(figsize = (6,6))
plt.plot(x_cos,y_cos,'g--')
plt.show()

x_tan=np.arange(0,2*np.pi,0.1)
y_tan=np.tan(x_tan)
plt.figure(figsize=(6,6))
plt.plot(x_tan,y_tan,'r--')
plt.show()

plt.figure(figsize=(6,6))
plt.subplot(2,2,1) #2row 2 cols means 4 graphs 1st is sin
plt.plot(x_sin,y_sin,'r--')
plt.title('sin curve')
plt.subplot(2,2,2) #2nd graph
plt.plot(x_cos,y_cos,'b--')
plt.title('cos curve')
plt.subplot(2,2,3) #3rd graph
plt.plot(x_tan,y_tan,'g--')
plt.title('tan curve')

x_cot=np.arange(0,2*np.pi,0.1)
y_cot=1/np.tan(x_cot)#for cot we do 1/tan
plt.subplot(2,2,4) #4rth graph
plt.plot(x_cot,y_cot,'w--')
plt.title('cot curve')
plt.show()

np.random.random(1)
#randomly generated one element array
#random number between 0-1

np.random.random(2)
#two randomly generated arrays of 2 size

np.random.random((2,2))
#two randomly generated arrays of 2*2 size

np.random.randint(1,10)
#random integer between 1-10

np.random.randint(1,10,(2,2))
#random integer between 1-10 of 2*2 size

np.random.randint(1,10,(3,4,5))
#3-D array

np.random.rand(2,2)
#give float values

np.random.randn(2,2)
#can have negetive values also

a=np.arange(1,10)
a

np.random.choice(a)
#randomly choose from array

s1='Bhawneet is my name'
s2='I am an Indian'

np.char.add(s1,s2)
#concat

np.char.lower(s1)
#all in lower case

np.char.upper(s1)
# all in upper

np.char.split(s1)
#split where is find space and add in list

s3='Bhawneet is my \n name'
np.char.splitlines(s3)
#split where is find \n and add in list

np.char.replace(s1,'name','surname')
#replace name->surname

print(np.char.center('good bye',80,'*'))
#************************************good bye************************************